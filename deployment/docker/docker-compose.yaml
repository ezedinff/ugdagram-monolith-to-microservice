version: "3"

volumes:
  db-data:

services:
  db:
    image: postgres
    restart: always
    environment:
      POSTGRES_USER: $POSTGRESS_USERNAME
      POSTGRES_PASSWORD: $POSTGRESS_PASSWORD
    ports:
      - 5432:5432
    volumes:
      - "db-data:/var/lib/postgresql/data"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U udagram"]
      interval: 10s
      timeout: 5s
      retries: 5
  reverseproxy:
      image: ezedinff/udagram-reverseproxy
      ports:
          - 8080:8080
      restart: always
      depends_on:
        - backend-user
        - backend-feed     
  backend-user:
    image: ezedinff/udagram-api-user
    environment:
      POSTGRESS_USERNAME: $POSTGRESS_USERNAME
      POSTGRESS_PASSWORD: $POSTGRESS_PASSWORD 
      POSTGRESS_DB: $POSTGRESS_DB 
      POSTGRESS_HOST: $POSTGRESS_HOST 
      AWS_REGION: $AWS_REGION 
      AWS_PROFILE: $AWS_PROFILE 
      AWS_BUCKET: $AWS_BUCKET
      JWT_SECRET: $JWT_SECRET
      URL: "http://localhost:8100"
    depends_on:
      - db
  backend-feed:
    image: ezedinff/udagram-api-feed
    volumes:
      - $HOME/.aws:/root/.aws
    environment:
      POSTGRESS_USERNAME: $POSTGRESS_USERNAME
      POSTGRESS_PASSWORD: $POSTGRESS_PASSWORD 
      POSTGRESS_DB: $POSTGRESS_DB 
      POSTGRESS_HOST: $POSTGRESS_HOST 
      AWS_REGION: $AWS_REGION 
      AWS_PROFILE: $AWS_PROFILE 
      AWS_BUCKET: $AWS_BUCKET
      JWT_SECRET: $JWT_SECRET
      URL: "http://localhost:8100"
    depends_on:
      - db
  frontend:
    image: ezedinff/udagram-frontend:local
    ports:
      - "8100:80"